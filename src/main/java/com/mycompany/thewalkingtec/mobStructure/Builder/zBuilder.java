/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.thewalkingtec.mobStructure.Builder;

import com.mycompany.thewalkingtec.mobStructure.Offense.Zombie;
import java.io.BufferedWriter;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import java.io.FileWriter;
import java.io.IOException;

/**
 *
 * @author Fabo
 */
public class zBuilder extends javax.swing.JFrame {

    /**
     * Creates new form zBuilder
     */
    public zBuilder() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        zombieName = new javax.swing.JTextField();
        fieldsInMatrix = new javax.swing.JTextField();
        zombieLevel = new javax.swing.JTextField();
        unlockLevel = new javax.swing.JTextField();
        damage = new javax.swing.JTextField();
        hps = new javax.swing.JTextField();
        zombieType = new javax.swing.JComboBox<>();
        zombieImage = new javax.swing.JLabel();
        createButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        normalStateTextField = new javax.swing.JTextField();
        normalStateButton = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Crear zombie");

        zombieName.setText("Nombre del zombie");
        zombieName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zombieNameActionPerformed(evt);
            }
        });

        fieldsInMatrix.setText("Campos en la matriz");

        zombieLevel.setText("Nivel inicial");

        unlockLevel.setText("Nivel de aparición");

        damage.setText("Daño por golpe");

        hps.setText("Golpes por segundo");

        zombieType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "De contacto", "Aereo", "De choque", "Medio alcance" }));

        zombieImage.setIcon(new javax.swing.ImageIcon("C:\\Users\\Xtremetech\\Documents\\NetBeansProjects\\TheWalkingTEC\\src\\main\\java\\com\\mycompany\\thewalkingtec\\mobStructure\\Builder\\image\\Zombie.png")); // NOI18N

        createButton.setText("Créame!");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });
        createButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                createButtonKeyPressed(evt);
            }
        });

        jLabel2.setText("Elije el archivo de imagen (Estado normal): ");

        normalStateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalStateTextFieldActionPerformed(evt);
            }
        });

        normalStateButton.setText("...");
        normalStateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                normalStateButtonMouseClicked(evt);
            }
        });
        normalStateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalStateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(94, 94, 94))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(zombieType, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hps, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(damage, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(unlockLevel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zombieLevel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zombieName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldsInMatrix, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zombieImage)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(createButton)
                                .addGap(20, 20, 20)))))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(normalStateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(normalStateButton)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(zombieName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fieldsInMatrix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(zombieLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(unlockLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(damage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(hps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(zombieImage)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(normalStateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(normalStateButton)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zombieType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createButton))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void zombieNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zombieNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_zombieNameActionPerformed

    private void createButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_createButtonKeyPressed
        // TODO add your handling code here:
        
        String name = zombieName.getText();
        String type = (String) zombieType.getSelectedItem();
        String level = zombieLevel.getText();
        String genericUnlocked = unlockLevel.getText();
        String genericDamage = damage.getText();
        String genericSizeInMatrix = fieldsInMatrix.getText();
        String genericHPS = hps.getText();
        
        //this = new Zombie(name, );
    }//GEN-LAST:event_createButtonKeyPressed

    private void normalStateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalStateButtonActionPerformed
        // TODO add your handling code here:
        
        JFileChooser fc = new JFileChooser();
        
        int seleccion = fc.showOpenDialog(this);
        
        if (seleccion == JFileChooser.APPROVE_OPTION){ //COMPROBAR QUE SE DE CLICK EN ACEPTAR
            File archivo = fc.getSelectedFile();
            normalStateTextField.setText(archivo.getAbsolutePath());
        }         
    }//GEN-LAST:event_normalStateButtonActionPerformed

    private void normalStateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalStateTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_normalStateTextFieldActionPerformed
     
    private void normalStateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_normalStateButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_normalStateButtonMouseClicked

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
       
        try {
        String name = zombieName.getText();
        String selectedFile = normalStateTextField.getText();
        String type = (String) zombieType.getSelectedItem();
        String level = zombieLevel.getText();
        String genericUnlocked = unlockLevel.getText();
        String genericDamage = damage.getText();
        String genericSizeInMatrix = fieldsInMatrix.getText();
        String genericHPS = hps.getText();

        // Obtener la ruta del archivo de texto
        String txtFilePath = "src/main/java/com/mycompany/thewalkingtec/mobFiles/Zombies/" + name + ".txt";

        // Crear un objeto BufferedWriter para escribir en el archivo de texto
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(txtFilePath))) {
            // Escribir los datos en el archivo de texto, uno por línea
            writer.write(name);
            writer.newLine();
            writer.write(type);
            writer.newLine();
            writer.write(selectedFile);
            writer.newLine();
            writer.write(level);
            writer.newLine();
            writer.write(genericUnlocked);
            writer.newLine();
            writer.write(genericDamage);
            writer.newLine();
            writer.write(genericSizeInMatrix);
            writer.newLine();
            writer.write(genericHPS);
        } catch (IOException e) {
            e.printStackTrace();
        }

    } catch (NumberFormatException e) {
        // Manejar excepciones si los valores no son números válidos
        e.printStackTrace();
    }
        
        
    }//GEN-LAST:event_createButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(zBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(zBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(zBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(zBuilder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new zBuilder().setVisible(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createButton;
    private javax.swing.JTextField damage;
    private javax.swing.JTextField fieldsInMatrix;
    private javax.swing.JTextField hps;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton normalStateButton;
    private javax.swing.JTextField normalStateTextField;
    private javax.swing.JTextField unlockLevel;
    private javax.swing.JLabel zombieImage;
    private javax.swing.JTextField zombieLevel;
    private javax.swing.JTextField zombieName;
    private javax.swing.JComboBox<String> zombieType;
    // End of variables declaration//GEN-END:variables
}
